"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const shared_mocks_1 = require("../../lib/shared-mocks");
const zod_1 = require("zod");
const dynamoClient = new client_dynamodb_1.DynamoDBClient({});
const docClient = lib_dynamodb_1.DynamoDBDocumentClient.from(dynamoClient);
const logger = new shared_mocks_1.StructuredLogger('MoveBaseHandler');
const PLAYER_BASES_TABLE = process.env.PLAYER_BASES_TABLE ?? '';
const MoveBaseRequestSchema = zod_1.z.object({
    playerId: zod_1.z.string().min(1).max(50),
    baseId: zod_1.z.string().min(1).max(50),
    newCoordinates: zod_1.z.object({
        x: zod_1.z.number().min(-1000000).max(1000000),
        y: zod_1.z.number().min(-1000000).max(1000000)
    }),
    useTeleport: zod_1.z.boolean().optional().default(false) // Instant movement for gold
});
/**
 * Move Base Handler
 *
 * Implements base movement system following SOLID principles:
 * - Single Responsibility: Only handles base relocation
 * - Open/Closed: Extensible for different movement types
 * - Liskov Substitution: All movement types follow same pattern
 * - Interface Segregation: Clear movement operation interface
 * - Dependency Inversion: Depends on shared game utilities
 *
 * Game Mechanics:
 * - Validates movement cooldown (60 minutes default)
 * - Supports instant teleportation for gold cost
 * - Prevents movement to occupied coordinates
 * - Calculates travel time based on distance
 * - Updates map sectioning for efficient queries
 * - Implements movement restrictions near enemy bases
 */
const handler = async (event) => {
    return (0, shared_mocks_1.withErrorHandling)(async () => {
        logger.info('Processing base movement request', {
            requestId: event.requestContext?.requestId
        });
        const request = await (0, shared_mocks_1.validateRequest)(MoveBaseRequestSchema, event.body);
        // Get current base state
        const currentBase = await getPlayerBase(request.playerId, request.baseId);
        // Validate movement is allowed
        await validateMovement(currentBase, request.newCoordinates, request.useTeleport);
        // Check destination is available
        await validateDestination(request.newCoordinates, request.baseId);
        // Calculate movement cost and time
        const movementDetails = calculateMovementDetails(currentBase, request.newCoordinates, request.useTeleport);
        // Execute the movement
        const result = await executeBaseMovement(request, currentBase, movementDetails);
        logger.info('Base movement processed', {
            playerId: request.playerId,
            baseId: request.baseId,
            fromCoordinates: currentBase.coordinates,
            toCoordinates: request.newCoordinates,
            teleport: request.useTeleport,
            travelTime: movementDetails.travelTime
        });
        return {
            statusCode: 200,
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            body: JSON.stringify({
                success: true,
                data: {
                    movement: result,
                    message: request.useTeleport
                        ? 'Base teleported instantly'
                        : `Base movement initiated, arrival in ${Math.ceil(movementDetails.travelTime / 60)} minutes`
                }
            })
        };
    }, logger);
};
exports.handler = handler;
async function getPlayerBase(playerId, baseId) {
    try {
        const command = new lib_dynamodb_1.GetCommand({
            TableName: PLAYER_BASES_TABLE,
            Key: { playerId, baseId }
        });
        const response = await docClient.send(command);
        if (!response.Item) {
            throw new shared_mocks_1.GameEngineError('Base not found', 'BASE_NOT_FOUND', { playerId, baseId });
        }
        const base = response.Item;
        if (base.status !== 'active') {
            throw new shared_mocks_1.GameEngineError(`Cannot move base with status: ${base.status}`, 'INVALID_BASE_STATUS', { playerId, baseId, status: base.status });
        }
        return base;
    }
    catch (error) {
        if (error instanceof shared_mocks_1.GameEngineError)
            throw error;
        throw new shared_mocks_1.GameEngineError('Failed to retrieve base', 'BASE_RETRIEVAL_ERROR', { playerId, baseId, error: error.message });
    }
}
async function validateMovement(base, newCoordinates, useTeleport) {
    try {
        const now = Date.now();
        const cooldownPeriod = 60 * 60 * 1000; // 60 minutes in milliseconds
        // Check movement cooldown (unless using teleport)
        if (!useTeleport && base.lastMovedAt && (now - base.lastMovedAt) < cooldownPeriod) {
            const remainingCooldown = cooldownPeriod - (now - base.lastMovedAt);
            throw new shared_mocks_1.GameEngineError('Base movement on cooldown', 'MOVEMENT_COOLDOWN', {
                baseId: base.baseId,
                remainingMinutes: Math.ceil(remainingCooldown / (60 * 1000))
            });
        }
        // Validate coordinates are different
        if (base.coordinates.x === newCoordinates.x && base.coordinates.y === newCoordinates.y) {
            throw new shared_mocks_1.GameEngineError('New coordinates must be different from current location', 'SAME_COORDINATES', { currentCoordinates: base.coordinates, newCoordinates });
        }
        // Validate movement distance (max 1000 units for normal movement)
        if (!useTeleport) {
            const distance = calculateDistance(base.coordinates, newCoordinates);
            const maxDistance = 1000;
            if (distance > maxDistance) {
                throw new shared_mocks_1.GameEngineError(`Movement distance exceeds maximum (${maxDistance} units)`, 'DISTANCE_TOO_FAR', { distance, maxDistance, coordinates: { from: base.coordinates, to: newCoordinates } });
            }
        }
    }
    catch (error) {
        if (error instanceof shared_mocks_1.GameEngineError)
            throw error;
        throw new shared_mocks_1.GameEngineError('Movement validation failed', 'MOVEMENT_VALIDATION_ERROR', { baseId: base.baseId, error: error.message });
    }
}
async function validateDestination(coordinates, excludeBaseId) {
    try {
        const coordinateHash = `${coordinates.x},${coordinates.y}`;
        // Check if coordinates are occupied by another base
        const command = new lib_dynamodb_1.QueryCommand({
            TableName: PLAYER_BASES_TABLE,
            IndexName: 'LocationIndex',
            KeyConditionExpression: 'mapSectionId = :sectionId AND coordinateHash = :coordHash',
            ExpressionAttributeValues: {
                ':sectionId': `${Math.floor(coordinates.x / 100)},${Math.floor(coordinates.y / 100)}`,
                ':coordHash': coordinateHash,
                ':excludeBaseId': excludeBaseId,
                ':destroyed': 'destroyed'
            },
            FilterExpression: 'baseId <> :excludeBaseId AND #status <> :destroyed',
            ExpressionAttributeNames: {
                '#status': 'status'
            }
        });
        const response = await docClient.send(command);
        if (response.Items && response.Items.length > 0) {
            throw new shared_mocks_1.GameEngineError('Destination coordinates are occupied', 'COORDINATES_OCCUPIED', { coordinates, occupiedBy: response.Items[0].baseId });
        }
        // TODO: Add validation for restricted zones, enemy alliance territories, etc.
    }
    catch (error) {
        if (error instanceof shared_mocks_1.GameEngineError)
            throw error;
        throw new shared_mocks_1.GameEngineError('Destination validation failed', 'DESTINATION_VALIDATION_ERROR', { coordinates, error: error.message });
    }
}
function calculateMovementDetails(base, newCoordinates, useTeleport) {
    const distance = calculateDistance(base.coordinates, newCoordinates);
    if (useTeleport) {
        // Instant teleportation with gold cost
        const goldCost = Math.max(50, Math.ceil(distance / 10)); // 1 gold per 10 units, minimum 50
        return {
            travelTime: 0,
            goldCost: goldCost,
            distance: distance
        };
    }
    else {
        // Calculate travel time: 1 minute per unit distance (minimum 5 minutes)
        const travelTime = Math.max(300, distance * 60); // seconds
        return {
            travelTime: travelTime,
            distance: distance
        };
    }
}
function calculateDistance(from, to) {
    const dx = to.x - from.x;
    const dy = to.y - from.y;
    return Math.sqrt(dx * dx + dy * dy);
}
async function executeBaseMovement(request, base, movementDetails) {
    try {
        const now = Date.now();
        const arrivalTime = now + (movementDetails.travelTime * 1000);
        // Calculate new map section
        const newMapSectionId = `${Math.floor(request.newCoordinates.x / 100)},${Math.floor(request.newCoordinates.y / 100)}`;
        const newCoordinateHash = `${request.newCoordinates.x},${request.newCoordinates.y}`;
        const updateExpression = request.useTeleport
            ? 'SET coordinates = :newCoords, mapSectionId = :newSection, coordinateHash = :newHash, lastMovedAt = :now, lastActiveAt = :now'
            : 'SET coordinates = :newCoords, mapSectionId = :newSection, coordinateHash = :newHash, #status = :moving, lastMovedAt = :now, lastActiveAt = :now, arrivalTime = :arrivalTime';
        const expressionAttributeNames = request.useTeleport ? {} : { '#status': 'status' };
        const expressionAttributeValues = {
            ':newCoords': request.newCoordinates,
            ':newSection': newMapSectionId,
            ':newHash': newCoordinateHash,
            ':now': now
        };
        if (!request.useTeleport) {
            expressionAttributeValues[':moving'] = 'moving';
            expressionAttributeValues[':arrivalTime'] = arrivalTime;
        }
        const command = new lib_dynamodb_1.UpdateCommand({
            TableName: PLAYER_BASES_TABLE,
            Key: {
                playerId: request.playerId,
                baseId: request.baseId
            },
            UpdateExpression: updateExpression,
            ExpressionAttributeNames: Object.keys(expressionAttributeNames).length > 0 ? expressionAttributeNames : undefined,
            ExpressionAttributeValues: expressionAttributeValues,
            ReturnValues: 'ALL_NEW'
        });
        const response = await docClient.send(command);
        // TODO: If teleport, deduct gold cost from player resources (integrate with resource service)
        return {
            baseId: request.baseId,
            newCoordinates: request.newCoordinates,
            status: request.useTeleport ? 'active' : 'moving',
            arrivalTime: request.useTeleport ? now : arrivalTime,
            goldCost: movementDetails.goldCost,
            distance: movementDetails.distance
        };
    }
    catch (error) {
        throw new shared_mocks_1.GameEngineError('Failed to execute base movement', 'MOVEMENT_EXECUTION_ERROR', {
            playerId: request.playerId,
            baseId: request.baseId,
            error: error.message
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW92ZS1iYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGFtYmRhL2Jhc2UtbWFuYWdlbWVudC9tb3ZlLWJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsOERBQTBEO0FBQzFELHdEQUF3RztBQUN4Ryx5REFLZ0M7QUFDaEMsNkJBQXdCO0FBRXhCLE1BQU0sWUFBWSxHQUFHLElBQUksZ0NBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM1QyxNQUFNLFNBQVMsR0FBRyxxQ0FBc0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDNUQsTUFBTSxNQUFNLEdBQUcsSUFBSSwrQkFBZ0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBRXZELE1BQU0sa0JBQWtCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLENBQUM7QUFFaEUsTUFBTSxxQkFBcUIsR0FBRyxPQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3JDLFFBQVEsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7SUFDbkMsTUFBTSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztJQUNqQyxjQUFjLEVBQUUsT0FBQyxDQUFDLE1BQU0sQ0FBQztRQUN2QixDQUFDLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUM7UUFDeEMsQ0FBQyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDO0tBQ3pDLENBQUM7SUFDRixXQUFXLEVBQUUsT0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFD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LFFBQVE7U0FDbkMsQ0FBQztJQUVKLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsTUFBTSxJQUFJLDhCQUFlLENBQ3ZCLGlDQUFpQyxFQUNqQywwQkFBMEIsRUFDMUI7WUFDRSxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7WUFDMUIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO1lBQ3RCLEtBQUssRUFBRyxLQUFlLENBQUMsT0FBTztTQUNoQyxDQUNGLENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSUdhdGV3YXlQcm94eUV2ZW50LCBBUElHYXRld2F5UHJveHlSZXN1bHQgfSBmcm9tICdhd3MtbGFtYmRhJztcbmltcG9ydCB7IER5bmFtb0RCQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiJztcbmltcG9ydCB7IER5bmFtb0RCRG9jdW1lbnRDbGllbnQsIEdldENvbW1hbmQsIFVwZGF0ZUNvbW1hbmQsIFF1ZXJ5Q29tbWFuZCB9IGZyb20gJ0Bhd3Mtc2RrL2xpYi1keW5hbW9kYic7XG5pbXBvcnQgeyBcbiAgU3RydWN0dXJlZExvZ2dlciwgXG4gIEdhbWVFbmdpbmVFcnJvcixcbiAgd2l0aEVycm9ySGFuZGxpbmcsXG4gIHZhbGlkYXRlUmVxdWVzdCBcbn0gZnJvbSAnLi4vLi4vbGliL3NoYXJlZC1tb2Nrcyc7XG5pbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcblxuY29uc3QgZHluYW1vQ2xpZW50ID0gbmV3IER5bmFtb0RCQ2xpZW50KHt9KTtcbmNvbnN0IGRvY0NsaWVudCA9IER5bmFtb0RCRG9jdW1lbnRDbGllbnQuZnJvbShkeW5hbW9DbGllbnQpO1xuY29uc3QgbG9nZ2VyID0gbmV3IFN0cnVjdHVyZWRMb2dnZXIoJ01vdmVCYXNlSGFuZGxlcicpO1xuXG5jb25zdCBQTEFZRVJfQkFTRVNfVEFCTEUgPSBwcm9jZXNzLmVudi5QTEFZRVJfQkFTRVNfVEFCTEUgPz8gJyc7XG5cbmNvbnN0IE1vdmVCYXNlUmVxdWVzdFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgcGxheWVySWQ6IHouc3RyaW5nKCkubWluKDEpLm1heCg1MCksXG4gIGJhc2VJZDogei5zdHJpbmcoKS5taW4oMSkubWF4KDUwKSxcbiAgbmV3Q29vcmRpbmF0ZXM6IHoub2JqZWN0KHtcbiAgICB4OiB6Lm51bWJlcigpLm1pbigtMTAwMDAwMCkubWF4KDEwMDAwMDApLFxuICAgIHk6IHoubnVtYmVyKCkubWluKC0xMDAwMDAwKS5tYXgoMTAwMDAwMClcbiAgfSksXG4gIHVzZVRlbGVwb3J0OiB6LmJvb2xlYW4oKS5vcHRpb25hbCgpLmRlZmF1bHQoZmFsc2UpIC8vIEluc3RhbnQgbW92ZW1lbnQgZm9yIGdvbGRcbn0pO1xuXG50eXBlIE1vdmVCYXNlUmVxdWVzdCA9IHouaW5mZXI8dHlwZW9mIE1vdmVCYXNlUmVxdWVzdFNjaGVtYT47XG5cbi8qKlxuICogTW92ZSBCYXNlIEhhbmRsZXJcbiAqIFxuICogSW1wbGVtZW50cyBiYXNlIG1vdmVtZW50IHN5c3RlbSBmb2xsb3dpbmcgU09MSUQgcHJpbmNpcGxlczpcbiAqIC0gU2luZ2xlIFJlc3BvbnNpYmlsaXR5OiBPbmx5IGhhbmRsZXMgYmFzZSByZWxvY2F0aW9uXG4gKiAtIE9wZW4vQ2xvc2VkOiBFeHRlbnNpYmxlIGZvciBkaWZmZXJlbnQgbW92ZW1lbnQgdHlwZXNcbiAqIC0gTGlza292IFN1YnN0aXR1dGlvbjogQWxsIG1vdmVtZW50IHR5cGVzIGZvbGxvdyBzYW1lIHBhdHRlcm5cbiAqIC0gSW50ZXJmYWNlIFNlZ3JlZ2F0aW9uOiBDbGVhciBtb3ZlbWVudCBvcGVyYXRpb24gaW50ZXJmYWNlXG4gKiAtIERlcGVuZGVuY3kgSW52ZXJzaW9uOiBEZXBlbmRzIG9uIHNoYXJlZCBnYW1lIHV0aWxpdGllc1xuICogXG4gKiBHYW1lIE1lY2hhbmljczpcbiAqIC0gVmFsaWRhdGVzIG1vdmVtZW50IGNvb2xkb3duICg2MCBtaW51dGVzIGRlZmF1bHQpXG4gKiAtIFN1cHBvcnRzIGluc3RhbnQgdGVsZXBvcnRhdGlvbiBmb3IgZ29sZCBjb3N0XG4gKiAtIFByZXZlbnRzIG1vdmVtZW50IHRvIG9jY3VwaWVkIGNvb3JkaW5hdGVzXG4gKiAtIENhbGN1bGF0ZXMgdHJhdmVsIHRpbWUgYmFzZWQgb24gZGlzdGFuY2VcbiAqIC0gVXBkYXRlcyBtYXAgc2VjdGlvbmluZyBmb3IgZWZmaWNpZW50IHF1ZXJpZXNcbiAqIC0gSW1wbGVtZW50cyBtb3ZlbWVudCByZXN0cmljdGlvbnMgbmVhciBlbmVteSBiYXNlc1xuICovXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChcbiAgZXZlbnQ6IEFQSUdhdGV3YXlQcm94eUV2ZW50XG4pOiBQcm9taXNlPEFQSUdhdGV3YXlQcm94eVJlc3VsdD4gPT4ge1xuICByZXR1cm4gd2l0aEVycm9ySGFuZGxpbmcoYXN5bmMgKCkgPT4ge1xuICAgIGxvZ2dlci5pbmZvKCdQcm9jZXNzaW5nIGJhc2UgbW92ZW1lbnQgcmVxdWVzdCcsIHsgXG4gICAgICByZXF1ZXN0SWQ6IGV2ZW50LnJlcXVlc3RDb250ZXh0Py5yZXF1ZXN0SWQgXG4gICAgfSk7XG5cbiAgICBjb25zdCByZXF1ZXN0ID0gYXdhaXQgdmFsaWRhdGVSZXF1ZXN0PE1vdmVCYXNlUmVxdWVzdD4oTW92ZUJhc2VSZXF1ZXN0U2NoZW1hLCBldmVudC5ib2R5KTtcbiAgICBcbiAgICAvLyBHZXQgY3VycmVudCBiYXNlIHN0YXRlXG4gICAgY29uc3QgY3VycmVudEJhc2UgPSBhd2FpdCBnZXRQbGF5ZXJCYXNlKHJlcXVlc3QucGxheWVySWQsIHJlcXVlc3QuYmFzZUlkKTtcbiAgICBcbiAgICAvLyBWYWxpZGF0ZSBtb3ZlbWVudCBpcyBhbGxvd2VkXG4gICAgYXdhaXQgdmFsaWRhdGVNb3ZlbWVudChjdXJyZW50QmFzZSwgcmVxdWVzdC5uZXdDb29yZGluYXRlcywgcmVxdWVzdC51c2VUZWxlcG9ydCk7XG4gICAgXG4gICAgLy8gQ2hlY2sgZGVzdGluYXRpb24gaXMgYXZhaWxhYmxlXG4gICAgYXdhaXQgdmFsaWRhdGVEZXN0aW5hdGlvbihyZXF1ZXN0Lm5ld0Nvb3JkaW5hdGVzLCByZXF1ZXN0LmJhc2VJZCk7XG4gICAgXG4gICAgLy8gQ2FsY3VsYXRlIG1vdmVtZW50IGNvc3QgYW5kIHRpbWVcbiAgICBjb25zdCBtb3ZlbWVudERldGFpbHMgPSBjYWxjdWxhdGVNb3ZlbWVudERldGFpbHMoY3VycmVudEJhc2UsIHJlcXVlc3QubmV3Q29vcmRpbmF0ZXMsIHJlcXVlc3QudXNlVGVsZXBvcnQpO1xuICAgIFxuICAgIC8vIEV4ZWN1dGUgdGhlIG1vdmVtZW50XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZXhlY3V0ZUJhc2VNb3ZlbWVudChyZXF1ZXN0LCBjdXJyZW50QmFzZSwgbW92ZW1lbnREZXRhaWxzKTtcblxuICAgIGxvZ2dlci5pbmZvKCdCYXNlIG1vdmVtZW50IHByb2Nlc3NlZCcsIHtcbiAgICAgIHBsYXllcklkOiByZXF1ZXN0LnBsYXllcklkLFxuICAgICAgYmFzZUlkOiByZXF1ZXN0LmJhc2VJZCxcbiAgICAgIGZyb21Db29yZGluYXRlczogY3VycmVudEJhc2UuY29vcmRpbmF0ZXMsXG4gICAgICB0b0Nvb3JkaW5hdGVzOiByZXF1ZXN0Lm5ld0Nvb3JkaW5hdGVzLFxuICAgICAgdGVsZXBvcnQ6IHJlcXVlc3QudXNlVGVsZXBvcnQsXG4gICAgICB0cmF2ZWxUaW1lOiBtb3ZlbWVudERldGFpbHMudHJhdmVsVGltZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJ1xuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIG1vdmVtZW50OiByZXN1bHQsXG4gICAgICAgICAgbWVzc2FnZTogcmVxdWVzdC51c2VUZWxlcG9ydCBcbiAgICAgICAgICAgID8gJ0Jhc2UgdGVsZXBvcnRlZCBpbnN0YW50bHknIFxuICAgICAgICAgICAgOiBgQmFzZSBtb3ZlbWVudCBpbml0aWF0ZWQsIGFycml2YWwgaW4gJHtNYXRoLmNlaWwobW92ZW1lbnREZXRhaWxzLnRyYXZlbFRpbWUgLyA2MCl9IG1pbnV0ZXNgXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfSwgbG9nZ2VyKTtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFBsYXllckJhc2UocGxheWVySWQ6IHN0cmluZywgYmFzZUlkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgR2V0Q29tbWFuZCh7XG4gICAgICBUYWJsZU5hbWU6IFBMQVlFUl9CQVNFU19UQUJMRSxcbiAgICAgIEtleTogeyBwbGF5ZXJJZCwgYmFzZUlkIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZG9jQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgXG4gICAgaWYgKCFyZXNwb25zZS5JdGVtKSB7XG4gICAgICB0aHJvdyBuZXcgR2FtZUVuZ2luZUVycm9yKFxuICAgICAgICAnQmFzZSBub3QgZm91bmQnLFxuICAgICAgICAnQkFTRV9OT1RfRk9VTkQnLFxuICAgICAgICB7IHBsYXllcklkLCBiYXNlSWQgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBiYXNlID0gcmVzcG9uc2UuSXRlbTtcbiAgICBcbiAgICBpZiAoYmFzZS5zdGF0dXMgIT09ICdhY3RpdmUnKSB7XG4gICAgICB0aHJvdyBuZXcgR2FtZUVuZ2luZUVycm9yKFxuICAgICAgICBgQ2Fubm90IG1vdmUgYmFzZSB3aXRoIHN0YXR1czogJHtiYXNlLnN0YXR1c31gLFxuICAgICAgICAnSU5WQUxJRF9CQVNFX1NUQVRVUycsXG4gICAgICAgIHsgcGxheWVySWQsIGJhc2VJZCwgc3RhdHVzOiBiYXNlLnN0YXR1cyB9XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBiYXNlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEdhbWVFbmdpbmVFcnJvcikgdGhyb3cgZXJyb3I7XG4gICAgdGhyb3cgbmV3IEdhbWVFbmdpbmVFcnJvcihcbiAgICAgICdGYWlsZWQgdG8gcmV0cmlldmUgYmFzZScsXG4gICAgICAnQkFTRV9SRVRSSUVWQUxfRVJST1InLFxuICAgICAgeyBwbGF5ZXJJZCwgYmFzZUlkLCBlcnJvcjogKGVycm9yIGFzIEVycm9yKS5tZXNzYWdlIH1cbiAgICApO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHZhbGlkYXRlTW92ZW1lbnQoXG4gIGJhc2U6IGFueSwgXG4gIG5ld0Nvb3JkaW5hdGVzOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyIH0sIFxuICB1c2VUZWxlcG9ydDogYm9vbGVhblxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIHRyeSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBjb29sZG93blBlcmlvZCA9IDYwICogNjAgKiAxMDAwOyAvLyA2MCBtaW51dGVzIGluIG1pbGxpc2Vjb25kc1xuICAgIFxuICAgIC8vIENoZWNrIG1vdmVtZW50IGNvb2xkb3duICh1bmxlc3MgdXNpbmcgdGVsZXBvcnQpXG4gICAgaWYgKCF1c2VUZWxlcG9ydCAmJiBiYXNlLmxhc3RNb3ZlZEF0ICYmIChub3cgLSBiYXNlLmxhc3RNb3ZlZEF0KSA8IGNvb2xkb3duUGVyaW9kKSB7XG4gICAgICBjb25zdCByZW1haW5pbmdDb29sZG93biA9IGNvb2xkb3duUGVyaW9kIC0gKG5vdyAtIGJhc2UubGFzdE1vdmVkQXQpO1xuICAgICAgdGhyb3cgbmV3IEdhbWVFbmdpbmVFcnJvcihcbiAgICAgICAgJ0Jhc2UgbW92ZW1lbnQgb24gY29vbGRvd24nLFxuICAgICAgICAnTU9WRU1FTlRfQ09PTERPV04nLFxuICAgICAgICB7IFxuICAgICAgICAgIGJhc2VJZDogYmFzZS5iYXNlSWQsIFxuICAgICAgICAgIHJlbWFpbmluZ01pbnV0ZXM6IE1hdGguY2VpbChyZW1haW5pbmdDb29sZG93biAvICg2MCAqIDEwMDApKVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIFZhbGlkYXRlIGNvb3JkaW5hdGVzIGFyZSBkaWZmZXJlbnRcbiAgICBpZiAoYmFzZS5jb29yZGluYXRlcy54ID09PSBuZXdDb29yZGluYXRlcy54ICYmIGJhc2UuY29vcmRpbmF0ZXMueSA9PT0gbmV3Q29vcmRpbmF0ZXMueSkge1xuICAgICAgdGhyb3cgbmV3IEdhbWVFbmdpbmVFcnJvcihcbiAgICAgICAgJ05ldyBjb29yZGluYXRlcyBtdXN0IGJlIGRpZmZlcmVudCBmcm9tIGN1cnJlbnQgbG9jYXRpb24nLFxuICAgICAgICAnU0FNRV9DT09SRElOQVRFUycsXG4gICAgICAgIHsgY3VycmVudENvb3JkaW5hdGVzOiBiYXNlLmNvb3JkaW5hdGVzLCBuZXdDb29yZGluYXRlcyB9XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIFZhbGlkYXRlIG1vdmVtZW50IGRpc3RhbmNlIChtYXggMTAwMCB1bml0cyBmb3Igbm9ybWFsIG1vdmVtZW50KVxuICAgIGlmICghdXNlVGVsZXBvcnQpIHtcbiAgICAgIGNvbnN0IGRpc3RhbmNlID0gY2FsY3VsYXRlRGlzdGFuY2UoYmFzZS5jb29yZGluYXRlcywgbmV3Q29vcmRpbmF0ZXMpO1xuICAgICAgY29uc3QgbWF4RGlzdGFuY2UgPSAxMDAwO1xuICAgICAgXG4gICAgICBpZiAoZGlzdGFuY2UgPiBtYXhEaXN0YW5jZSkge1xuICAgICAgICB0aHJvdyBuZXcgR2FtZUVuZ2luZUVycm9yKFxuICAgICAgICAgIGBNb3ZlbWVudCBkaXN0YW5jZSBleGNlZWRzIG1heGltdW0gKCR7bWF4RGlzdGFuY2V9IHVuaXRzKWAsXG4gICAgICAgICAgJ0RJU1RBTkNFX1RPT19GQVInLFxuICAgICAgICAgIHsgZGlzdGFuY2UsIG1heERpc3RhbmNlLCBjb29yZGluYXRlczogeyBmcm9tOiBiYXNlLmNvb3JkaW5hdGVzLCB0bzogbmV3Q29vcmRpbmF0ZXMgfSB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgR2FtZUVuZ2luZUVycm9yKSB0aHJvdyBlcnJvcjtcbiAgICB0aHJvdyBuZXcgR2FtZUVuZ2luZUVycm9yKFxuICAgICAgJ01vdmVtZW50IHZhbGlkYXRpb24gZmFpbGVkJyxcbiAgICAgICdNT1ZFTUVOVF9WQUxJREFUSU9OX0VSUk9SJyxcbiAgICAgIHsgYmFzZUlkOiBiYXNlLmJhc2VJZCwgZXJyb3I6IChlcnJvciBhcyBFcnJvcikubWVzc2FnZSB9XG4gICAgKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiB2YWxpZGF0ZURlc3RpbmF0aW9uKFxuICBjb29yZGluYXRlczogeyB4OiBudW1iZXI7IHk6IG51bWJlciB9LCBcbiAgZXhjbHVkZUJhc2VJZDogc3RyaW5nXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBjb29yZGluYXRlSGFzaCA9IGAke2Nvb3JkaW5hdGVzLnh9LCR7Y29vcmRpbmF0ZXMueX1gO1xuICAgIFxuICAgIC8vIENoZWNrIGlmIGNvb3JkaW5hdGVzIGFyZSBvY2N1cGllZCBieSBhbm90aGVyIGJhc2VcbiAgICBjb25zdCBjb21tYW5kID0gbmV3IFF1ZXJ5Q29tbWFuZCh7XG4gICAgICBUYWJsZU5hbWU6IFBMQVlFUl9CQVNFU19UQUJMRSxcbiAgICAgIEluZGV4TmFtZTogJ0xvY2F0aW9uSW5kZXgnLFxuICAgICAgS2V5Q29uZGl0aW9uRXhwcmVzc2lvbjogJ21hcFNlY3Rpb25JZCA9IDpzZWN0aW9uSWQgQU5EIGNvb3JkaW5hdGVIYXNoID0gOmNvb3JkSGFzaCcsXG4gICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7XG4gICAgICAgICc6c2VjdGlvbklkJzogYCR7TWF0aC5mbG9vcihjb29yZGluYXRlcy54IC8gMTAwKX0sJHtNYXRoLmZsb29yKGNvb3JkaW5hdGVzLnkgLyAxMDApfWAsXG4gICAgICAgICc6Y29vcmRIYXNoJzogY29vcmRpbmF0ZUhhc2gsXG4gICAgICAgICc6ZXhjbHVkZUJhc2VJZCc6IGV4Y2x1ZGVCYXNlSWQsXG4gICAgICAgICc6ZGVzdHJveWVkJzogJ2Rlc3Ryb3llZCdcbiAgICAgIH0sXG4gICAgICBGaWx0ZXJFeHByZXNzaW9uOiAnYmFzZUlkIDw+IDpleGNsdWRlQmFzZUlkIEFORCAjc3RhdHVzIDw+IDpkZXN0cm95ZWQnLFxuICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiB7XG4gICAgICAgICcjc3RhdHVzJzogJ3N0YXR1cydcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZG9jQ2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgXG4gICAgaWYgKHJlc3BvbnNlLkl0ZW1zICYmIHJlc3BvbnNlLkl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgIHRocm93IG5ldyBHYW1lRW5naW5lRXJyb3IoXG4gICAgICAgICdEZXN0aW5hdGlvbiBjb29yZGluYXRlcyBhcmUgb2NjdXBpZWQnLFxuICAgICAgICAnQ09PUkRJTkFURVNfT0NDVVBJRUQnLFxuICAgICAgICB7IGNvb3JkaW5hdGVzLCBvY2N1cGllZEJ5OiByZXNwb25zZS5JdGVtc1swXS5iYXNlSWQgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBBZGQgdmFsaWRhdGlvbiBmb3IgcmVzdHJpY3RlZCB6b25lcywgZW5lbXkgYWxsaWFuY2UgdGVycml0b3JpZXMsIGV0Yy5cbiAgICBcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBHYW1lRW5naW5lRXJyb3IpIHRocm93IGVycm9yO1xuICAgIHRocm93IG5ldyBHYW1lRW5naW5lRXJyb3IoXG4gICAgICAnRGVzdGluYXRpb24gdmFsaWRhdGlvbiBmYWlsZWQnLFxuICAgICAgJ0RFU1RJTkFUSU9OX1ZBTElEQVRJT05fRVJST1InLFxuICAgICAgeyBjb29yZGluYXRlcywgZXJyb3I6IChlcnJvciBhcyBFcnJvcikubWVzc2FnZSB9XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVNb3ZlbWVudERldGFpbHMoXG4gIGJhc2U6IGFueSwgXG4gIG5ld0Nvb3JkaW5hdGVzOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyIH0sIFxuICB1c2VUZWxlcG9ydDogYm9vbGVhblxuKTogeyB0cmF2ZWxUaW1lOiBudW1iZXI7IGdvbGRDb3N0PzogbnVtYmVyOyBkaXN0YW5jZTogbnVtYmVyIH0ge1xuICBjb25zdCBkaXN0YW5jZSA9IGNhbGN1bGF0ZURpc3RhbmNlKGJhc2UuY29vcmRpbmF0ZXMsIG5ld0Nvb3JkaW5hdGVzKTtcbiAgXG4gIGlmICh1c2VUZWxlcG9ydCkge1xuICAgIC8vIEluc3RhbnQgdGVsZXBvcnRhdGlvbiB3aXRoIGdvbGQgY29zdFxuICAgIGNvbnN0IGdvbGRDb3N0ID0gTWF0aC5tYXgoNTAsIE1hdGguY2VpbChkaXN0YW5jZSAvIDEwKSk7IC8vIDEgZ29sZCBwZXIgMTAgdW5pdHMsIG1pbmltdW0gNTBcbiAgICByZXR1cm4ge1xuICAgICAgdHJhdmVsVGltZTogMCxcbiAgICAgIGdvbGRDb3N0OiBnb2xkQ29zdCxcbiAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgLy8gQ2FsY3VsYXRlIHRyYXZlbCB0aW1lOiAxIG1pbnV0ZSBwZXIgdW5pdCBkaXN0YW5jZSAobWluaW11bSA1IG1pbnV0ZXMpXG4gICAgY29uc3QgdHJhdmVsVGltZSA9IE1hdGgubWF4KDMwMCwgZGlzdGFuY2UgKiA2MCk7IC8vIHNlY29uZHNcbiAgICByZXR1cm4ge1xuICAgICAgdHJhdmVsVGltZTogdHJhdmVsVGltZSxcbiAgICAgIGRpc3RhbmNlOiBkaXN0YW5jZVxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlRGlzdGFuY2UoXG4gIGZyb206IHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfSwgXG4gIHRvOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyIH1cbik6IG51bWJlciB7XG4gIGNvbnN0IGR4ID0gdG8ueCAtIGZyb20ueDtcbiAgY29uc3QgZHkgPSB0by55IC0gZnJvbS55O1xuICByZXR1cm4gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZUJhc2VNb3ZlbWVudChcbiAgcmVxdWVzdDogTW92ZUJhc2VSZXF1ZXN0LFxuICBiYXNlOiBhbnksXG4gIG1vdmVtZW50RGV0YWlsczogeyB0cmF2ZWxUaW1lOiBudW1iZXI7IGdvbGRDb3N0PzogbnVtYmVyOyBkaXN0YW5jZTogbnVtYmVyIH1cbik6IFByb21pc2U8YW55PiB7XG4gIHRyeSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBhcnJpdmFsVGltZSA9IG5vdyArIChtb3ZlbWVudERldGFpbHMudHJhdmVsVGltZSAqIDEwMDApO1xuICAgIFxuICAgIC8vIENhbGN1bGF0ZSBuZXcgbWFwIHNlY3Rpb25cbiAgICBjb25zdCBuZXdNYXBTZWN0aW9uSWQgPSBgJHtNYXRoLmZsb29yKHJlcXVlc3QubmV3Q29vcmRpbmF0ZXMueCAvIDEwMCl9LCR7TWF0aC5mbG9vcihyZXF1ZXN0Lm5ld0Nvb3JkaW5hdGVzLnkgLyAxMDApfWA7XG4gICAgY29uc3QgbmV3Q29vcmRpbmF0ZUhhc2ggPSBgJHtyZXF1ZXN0Lm5ld0Nvb3JkaW5hdGVzLnh9LCR7cmVxdWVzdC5uZXdDb29yZGluYXRlcy55fWA7XG4gICAgXG4gICAgY29uc3QgdXBkYXRlRXhwcmVzc2lvbiA9IHJlcXVlc3QudXNlVGVsZXBvcnRcbiAgICAgID8gJ1NFVCBjb29yZGluYXRlcyA9IDpuZXdDb29yZHMsIG1hcFNlY3Rpb25JZCA9IDpuZXdTZWN0aW9uLCBjb29yZGluYXRlSGFzaCA9IDpuZXdIYXNoLCBsYXN0TW92ZWRBdCA9IDpub3csIGxhc3RBY3RpdmVBdCA9IDpub3cnXG4gICAgICA6ICdTRVQgY29vcmRpbmF0ZXMgPSA6bmV3Q29vcmRzLCBtYXBTZWN0aW9uSWQgPSA6bmV3U2VjdGlvbiwgY29vcmRpbmF0ZUhhc2ggPSA6bmV3SGFzaCwgI3N0YXR1cyA9IDptb3ZpbmcsIGxhc3RNb3ZlZEF0ID0gOm5vdywgbGFzdEFjdGl2ZUF0ID0gOm5vdywgYXJyaXZhbFRpbWUgPSA6YXJyaXZhbFRpbWUnO1xuICAgIFxuICAgIGNvbnN0IGV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHJlcXVlc3QudXNlVGVsZXBvcnQgPyB7fSA6IHsgJyNzdGF0dXMnOiAnc3RhdHVzJyB9O1xuICAgIGNvbnN0IGV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7XG4gICAgICAnOm5ld0Nvb3Jkcyc6IHJlcXVlc3QubmV3Q29vcmRpbmF0ZXMsXG4gICAgICAnOm5ld1NlY3Rpb24nOiBuZXdNYXBTZWN0aW9uSWQsXG4gICAgICAnOm5ld0hhc2gnOiBuZXdDb29yZGluYXRlSGFzaCxcbiAgICAgICc6bm93Jzogbm93XG4gICAgfTtcblxuICAgIGlmICghcmVxdWVzdC51c2VUZWxlcG9ydCkge1xuICAgICAgZXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1snOm1vdmluZyddID0gJ21vdmluZyc7XG4gICAgICBleHByZXNzaW9uQXR0cmlidXRlVmFsdWVzWyc6YXJyaXZhbFRpbWUnXSA9IGFycml2YWxUaW1lO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgVXBkYXRlQ29tbWFuZCh7XG4gICAgICBUYWJsZU5hbWU6IFBMQVlFUl9CQVNFU19UQUJMRSxcbiAgICAgIEtleToge1xuICAgICAgICBwbGF5ZXJJZDogcmVxdWVzdC5wbGF5ZXJJZCxcbiAgICAgICAgYmFzZUlkOiByZXF1ZXN0LmJhc2VJZFxuICAgICAgfSxcbiAgICAgIFVwZGF0ZUV4cHJlc3Npb246IHVwZGF0ZUV4cHJlc3Npb24sXG4gICAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IE9iamVjdC5rZXlzKGV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lcykubGVuZ3RoID4gMCA/IGV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lcyA6IHVuZGVmaW5lZCxcbiAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IGV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXMsXG4gICAgICBSZXR1cm5WYWx1ZXM6ICdBTExfTkVXJ1xuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBkb2NDbGllbnQuc2VuZChjb21tYW5kKTtcblxuICAgIC8vIFRPRE86IElmIHRlbGVwb3J0LCBkZWR1Y3QgZ29sZCBjb3N0IGZyb20gcGxheWVyIHJlc291cmNlcyAoaW50ZWdyYXRlIHdpdGggcmVzb3VyY2Ugc2VydmljZSlcblxuICAgIHJldHVybiB7XG4gICAgICBiYXNlSWQ6IHJlcXVlc3QuYmFzZUlkLFxuICAgICAgbmV3Q29vcmRpbmF0ZXM6IHJlcXVlc3QubmV3Q29vcmRpbmF0ZXMsXG4gICAgICBzdGF0dXM6IHJlcXVlc3QudXNlVGVsZXBvcnQgPyAnYWN0aXZlJyA6ICdtb3ZpbmcnLFxuICAgICAgYXJyaXZhbFRpbWU6IHJlcXVlc3QudXNlVGVsZXBvcnQgPyBub3cgOiBhcnJpdmFsVGltZSxcbiAgICAgIGdvbGRDb3N0OiBtb3ZlbWVudERldGFpbHMuZ29sZENvc3QsXG4gICAgICBkaXN0YW5jZTogbW92ZW1lbnREZXRhaWxzLmRpc3RhbmNlXG4gICAgfTtcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBHYW1lRW5naW5lRXJyb3IoXG4gICAgICAnRmFpbGVkIHRvIGV4ZWN1dGUgYmFzZSBtb3ZlbWVudCcsXG4gICAgICAnTU9WRU1FTlRfRVhFQ1VUSU9OX0VSUk9SJyxcbiAgICAgIHsgXG4gICAgICAgIHBsYXllcklkOiByZXF1ZXN0LnBsYXllcklkLCBcbiAgICAgICAgYmFzZUlkOiByZXF1ZXN0LmJhc2VJZCxcbiAgICAgICAgZXJyb3I6IChlcnJvciBhcyBFcnJvcikubWVzc2FnZSBcbiAgICAgIH1cbiAgICApO1xuICB9XG59Il19